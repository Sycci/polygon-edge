package staking

import (
	"fmt"
	"math/big"

	"github.com/0xPolygon/polygon-edge/chain"
	"github.com/0xPolygon/polygon-edge/helper/common"
	"github.com/0xPolygon/polygon-edge/helper/hex"
	"github.com/0xPolygon/polygon-edge/helper/keccak"
	"github.com/0xPolygon/polygon-edge/types"
	"github.com/0xPolygon/polygon-edge/validators"
)

var (
	MinValidatorCount = uint64(1)
	MaxValidatorCount = common.MaxSafeJSInt
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)

	return keccak.Keccak256(nil, finalSlice)
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset uint64) []byte {
	bigOffset := big.NewInt(int64(offset))
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/0xPolygon/staking-contracts/
func getStorageIndexes(validator validators.Validator, index int) *StorageIndexes {
	storageIndexes := &StorageIndexes{}
	address := validator.Addr()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(
		address,
		addressToIsValidatorSlot,
	)

	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(
		address,
		addressToStakedAmountSlot,
	)

	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(
		address,
		addressToValidatorIndexSlot,
	)

	storageIndexes.ValidatorBLSPublicKeyIndex = getAddressMapping(
		address,
		addressToBLSPublicKeySlot,
	)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		uint64(index),
	)

	return storageIndexes
}

// setBytesToStorage sets bytes data into storage map from specified base index
func setBytesToStorage(
	storageMap map[types.Hash]types.Hash,
	baseIndexBytes []byte,
	data []byte,
) {
	dataLen := len(data)
	baseIndex := types.BytesToHash(baseIndexBytes)

	if dataLen <= 31 {
		bytes := types.Hash{}

		copy(bytes[:len(data)], data)

		// Set 2*Size at the first byte
		bytes[len(bytes)-1] = byte(dataLen * 2)

		storageMap[baseIndex] = bytes

		return
	}

	// Set size at the base index
	baseSlot := types.Hash{}
	baseSlot[31] = byte(2*dataLen + 1)
	storageMap[baseIndex] = baseSlot

	zeroIndex := keccak.Keccak256(nil, baseIndexBytes)
	numBytesInSlot := 256 / 8

	for i := 0; i < dataLen; i++ {
		offset := i / numBytesInSlot

		slotIndex := types.BytesToHash(getIndexWithOffset(zeroIndex, uint64(offset)))
		byteIndex := i % numBytesInSlot

		slot := storageMap[slotIndex]
		slot[byteIndex] = data[i]

		storageMap[slotIndex] = slot
	}
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint64
	MaxValidatorCount uint64
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorBLSPublicKeyIndex   []byte // mapping(address => byte[])
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minNumValidatorSlot         = int64(5) // Slot 5
	maxNumValidatorSlot         = int64(6) // Slot 6
	addressToBLSPublicKeySlot   = int64(7) // Slot 7
)

const (
	DefaultStakedBalance = "0x0" // 0 ETH
	//nolint: lll
	StakingSCBytecode = "0x6080604052600436106101185760003560e01c80637a6eea37116100a0578063d94c111b11610064578063d94c111b14610358578063e387a7ed14610378578063e804fbf61461038e578063f90ecacc146103a3578063facd743b146103db57600080fd5b80637a6eea37146102a05780637dceceb8146102dd578063af6da36e1461030a578063c795c07714610320578063ca1e78191461033657600080fd5b8063373d6132116100e7578063373d61321461021f5780633a4b66f1146102345780633c561f041461023c57806351a9ab321461025e578063714ff4251461028b57600080fd5b806302b7519914610154578063065ae171146101945780632367f6b5146101d45780632def66201461020a57600080fd5b3661014f57333b156101455760405162461bcd60e51b815260040161013c90610be1565b60405180910390fd5b61014d610414565b005b600080fd5b34801561016057600080fd5b5061018161016f366004610c18565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101a057600080fd5b506101c46101af366004610c18565b60016020526000908152604090205460ff1681565b604051901515815260200161018b565b3480156101e057600080fd5b506101816101ef366004610c18565b6001600160a01b031660009081526002602052604090205490565b34801561021657600080fd5b5061014d61049e565b34801561022b57600080fd5b50600454610181565b61014d610523565b34801561024857600080fd5b5061025161054a565b60405161018b9190610c8e565b34801561026a57600080fd5b5061027e610279366004610c18565b6106a6565b60405161018b9190610cf0565b34801561029757600080fd5b50600554610181565b3480156102ac57600080fd5b506102bc670de0b6b3a764000081565b6040516fffffffffffffffffffffffffffffffff909116815260200161018b565b3480156102e957600080fd5b506101816102f8366004610c18565b60026020526000908152604090205481565b34801561031657600080fd5b5061018160065481565b34801561032c57600080fd5b5061018160055481565b34801561034257600080fd5b5061034b610740565b60405161018b9190610d03565b34801561036457600080fd5b5061014d610373366004610d66565b6107a2565b34801561038457600080fd5b5061018160045481565b34801561039a57600080fd5b50600654610181565b3480156103af57600080fd5b506103c36103be366004610e17565b610800565b6040516001600160a01b03909116815260200161018b565b3480156103e757600080fd5b506101c46103f6366004610c18565b6001600160a01b031660009081526001602052604090205460ff1690565b34600460008282546104269190610e46565b9091555050336000908152600260205260408120805434929061044a908490610e46565b9091555061045990503361082a565b156104675761046733610879565b60405134815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a2565b333b156104bd5760405162461bcd60e51b815260040161013c90610be1565b336000908152600260205260409020546105195760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000604482015260640161013c565b610521610949565b565b333b156105425760405162461bcd60e51b815260040161013c90610be1565b610521610414565b600080546060919067ffffffffffffffff81111561056a5761056a610d50565b60405190808252806020026020018201604052801561059d57816020015b60608152602001906001900390816105885790505b50905060005b6000548110156106a057600760008083815481106105c3576105c3610e59565b60009182526020808320909101546001600160a01b03168352820192909252604001902080546105f290610e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461061e90610e6f565b801561066b5780601f106106405761010080835404028352916020019161066b565b820191906000526020600020905b81548152906001019060200180831161064e57829003601f168201915b505050505082828151811061068257610682610e59565b6020026020010181905250808061069890610ea3565b9150506105a3565b50919050565b600760205260009081526040902080546106bf90610e6f565b80601f01602080910402602001604051908101604052809291908181526020018280546106eb90610e6f565b80156107385780601f1061070d57610100808354040283529160200191610738565b820191906000526020600020905b81548152906001019060200180831161071b57829003601f168201915b505050505081565b6060600080548060200260200160405190810160405280929190818152602001828054801561079857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161077a575b5050505050905090565b3360009081526007602052604090206107bb8282610f0b565b50336001600160a01b03167f472da4d064218fa97032725fbcff922201fa643fed0765b5ffe0ceef63d7b3dc826040516107f59190610cf0565b60405180910390a250565b6000818154811061081057600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03811660009081526001602052604081205460ff1615801561087357506001600160a01b038216600090815260026020526040902054670de0b6b3a764000011155b92915050565b600654600054106108dc5760405162461bcd60e51b815260206004820152602760248201527f56616c696461746f72207365742068617320726561636865642066756c6c20636044820152666170616369747960c81b606482015260840161013c565b6001600160a01b03166000818152600160208181526040808420805460ff19168417905583546003909252832081905590810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319169091179055565b3360009081526002602052604081208054908290556004805491928392610971908490610fcb565b90915550503360009081526001602052604090205460ff161561099757610997336109f7565b604051339082156108fc029083906000818181858888f193505050501580156109c4573d6000803e3d6000fd5b5060405181815233907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75906020016107f5565b60055460005411610a72576040805162461bcd60e51b81526020600482015260248101919091527f56616c696461746f72732063616e2774206265206c657373207468616e20746860448201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d606482015260840161013c565b600080546001600160a01b0383168252600360205260409091205410610acf5760405162461bcd60e51b8152602060048201526012602482015271696e646578206f7574206f662072616e676560701b604482015260640161013c565b6001600160a01b0381166000908152600360205260408120548154909190610af990600190610fcb565b9050808214610b7e576000808281548110610b1657610b16610e59565b600091825260208220015481546001600160a01b03909116925082919085908110610b4357610b43610e59565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526003909152604090208290555b6001600160a01b0383166000908152600160209081526040808320805460ff1916905560039091528120819055805480610bba57610bba610fde565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6020808252601a908201527f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000604082015260600190565b600060208284031215610c2a57600080fd5b81356001600160a01b0381168114610c4157600080fd5b9392505050565b6000815180845260005b81811015610c6e57602081850181015186830182015201610c52565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610ce357603f19888603018452610cd1858351610c48565b94509285019290850190600101610cb5565b5092979650505050505050565b602081526000610c416020830184610c48565b6020808252825182820181905260009190848201906040850190845b81811015610d445783516001600160a01b031683529284019291840191600101610d1f565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610d7857600080fd5b813567ffffffffffffffff80821115610d9057600080fd5b818401915084601f830112610da457600080fd5b813581811115610db657610db6610d50565b604051601f8201601f19908116603f01168101908382118183101715610dde57610dde610d50565b81604052828152876020848701011115610df757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215610e2957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561087357610873610e30565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610e8357607f821691505b6020821081036106a057634e487b7160e01b600052602260045260246000fd5b600060018201610eb557610eb5610e30565b5060010190565b601f821115610f0657600081815260208120601f850160051c81016020861015610ee35750805b601f850160051c820191505b81811015610f0257828155600101610eef565b5050505b505050565b815167ffffffffffffffff811115610f2557610f25610d50565b610f3981610f338454610e6f565b84610ebc565b602080601f831160018114610f6e5760008415610f565750858301515b600019600386901b1c1916600185901b178555610f02565b600085815260208120601f198616915b82811015610f9d57888601518255948401946001909101908401610f7e565b5085821015610fbb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561087357610873610e30565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220bfa63b2c2caab1109d2cbe09b771ad6e7e8362144d71e863621e018a67bce37564736f6c63430008120033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	vals validators.Validators,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/0xPolygon/staking-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))
	valsLen := big.NewInt(0)

	if vals != nil {
		valsLen = big.NewInt(int64(vals.Len()))

		for idx := 0; idx < vals.Len(); idx++ {
			validator := vals.At(uint64(idx))

			// Update the total staked amount
			stakedAmount = stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

			// Get the storage indexes
			storageIndexes := getStorageIndexes(validator, idx)

			// Set the value for the validators array
			storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
				types.BytesToHash(
					validator.Addr().Bytes(),
				)

			if blsValidator, ok := validator.(*validators.BLSValidator); ok {
				setBytesToStorage(
					storageMap,
					storageIndexes.ValidatorBLSPublicKeyIndex,
					blsValidator.BLSPublicKey,
				)
			}

			// Set the value for the address -> validator array index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
				types.BytesToHash(bigTrueValue.Bytes())

			// Set the value for the address -> staked amount mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
				types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

			// Set the value for the address -> validator index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
				types.StringToHash(hex.EncodeUint64(uint64(idx)))
		}
	}

	// Set the value for the total staked amount
	storageMap[types.BytesToHash(big.NewInt(stakedAmountSlot).Bytes())] =
		types.BytesToHash(stakedAmount.Bytes())

	// Set the value for the size of the validators array
	storageMap[types.BytesToHash(big.NewInt(validatorsSlot).Bytes())] =
		types.BytesToHash(valsLen.Bytes())

	// Set the value for the minimum number of validators
	storageMap[types.BytesToHash(big.NewInt(minNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMinNumValidators.Bytes())

	// Set the value for the maximum number of validators
	storageMap[types.BytesToHash(big.NewInt(maxNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMaxNumValidators.Bytes())

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
